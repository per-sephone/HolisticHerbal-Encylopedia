// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	model "holistic-herbal-encyclopedia/model"

	mock "github.com/stretchr/testify/mock"
)

// IModel is an autogenerated mock type for the IModel type
type IModel struct {
	mock.Mock
}

// Insert provides a mock function with given fields: name, dosage, uses, precautions, preparations
func (_m *IModel) Insert(name string, dosage string, uses string, precautions string, preparations string) int64 {
	ret := _m.Called(name, dosage, uses, precautions, preparations)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) int64); ok {
		r0 = rf(name, dosage, uses, precautions, preparations)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Select provides a mock function with given fields:
func (_m *IModel) Select() []model.Herb {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 []model.Herb
	if rf, ok := ret.Get(0).(func() []model.Herb); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Herb)
		}
	}

	return r0
}

// SelectByName provides a mock function with given fields: name
func (_m *IModel) SelectByName(name string) model.Herb {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for SelectByName")
	}

	var r0 model.Herb
	if rf, ok := ret.Get(0).(func(string) model.Herb); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(model.Herb)
	}

	return r0
}

// SelectByUse provides a mock function with given fields: use
func (_m *IModel) SelectByUse(use string) []model.Herb {
	ret := _m.Called(use)

	if len(ret) == 0 {
		panic("no return value specified for SelectByUse")
	}

	var r0 []model.Herb
	if rf, ok := ret.Get(0).(func(string) []model.Herb); ok {
		r0 = rf(use)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Herb)
		}
	}

	return r0
}

// NewIModel creates a new instance of IModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *IModel {
	mock := &IModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
